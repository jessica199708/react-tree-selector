{"ast":null,"code":"export function dataInit(data, parent) {\n  return data.map(item => {\n    if (item.children && item.children.length > 0) {\n      // 如果当前节点有子节点\n      item.open = 'close'; // 初始化的时候所有子节点收起\n\n      item.children = dataInit(item.children, item); // 递归其子节点\n    } else {\n      item.open = ''; //如果没有子节点则没有下拉单\n    }\n\n    item.selectMode = '';\n    item.parent = parent;\n    item.onSelect = ''; //初始化所有节点都没被选中\n\n    item.selectMode = 'Single'; //初始化时所有节点都为Single\n\n    return item;\n  });\n}\nexport function getChecked(item) {\n  // 子选项的选择与否影响父选项\n  var childUnchecked = item.children.map(item => item.onSelect).indexOf('') !== -1;\n  var childChecked = item.children.map(item => item.onSelect).indexOf('checked') !== -1;\n  var childHalf = item.children.map(item => item.onSelect).indexOf('half') !== -1;\n  if (childUnchecked && !childChecked && !childHalf) return ''; //子选项都为空 父选项为空\n  else if (childChecked && !childUnchecked && !childHalf) return 'checked'; //子选项全选 父选项为全选\n  else return 'half'; //子选项部分选择 父选项为半选\n}\nexport function adjustChecked(item) {\n  // 父选项如果被勾选那么其子选项全部被勾选\n  let parent = item.parent;\n\n  while (parent) {\n    // 循环父级的父级直到根节点\n    parent.onSelect = getChecked(parent);\n    parent = parent.parent;\n  }\n\n  if (item.children && item.children.length > 0) adjust(item.children, item.onSelect);\n\n  function adjust(arr, checked) {\n    // 调整子选项与父选项保持一致\n    arr.forEach(item => {\n      item.onSelect = checked;\n      if (item.children && item.children.length > 0) adjust(item.children, item.onSelect);\n    });\n  }\n}\nexport function countCheck(item) {\n  // 改变selectMode的状态\n  if (item.parent) {\n    var counter = 0;\n    var childList = item.parent.children;\n\n    for (let i in childList) {\n      if (childList[i].onSelect == 'checked') {\n        counter++;\n\n        if (counter > 1) {\n          item.parent.selectMode = 'Multiple';\n          var grandParent = item.parent.parent;\n\n          while (grandParent) {\n            grandParent.selectMode = 'Multiple';\n            grandParent = grandParent.parent;\n          }\n        }\n      }\n    }\n  }\n}","map":{"version":3,"sources":["/Users/jia/Desktop/react-tree-selector/src/assets/tree.jsx"],"names":["dataInit","data","parent","map","item","children","length","open","selectMode","onSelect","getChecked","childUnchecked","indexOf","childChecked","childHalf","adjustChecked","adjust","arr","checked","forEach","countCheck","counter","childList","i","grandParent"],"mappings":"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","sourcesContent":["\nexport function dataInit(data, parent) {\n    return data.map(item => {\n        if (item.children && item.children.length > 0) { // 如果当前节点有子节点\n            item.open = 'close';  // 初始化的时候所有子节点收起\n            item.children = dataInit(item.children, item);  // 递归其子节点\n        } else {\n            item.open = ''; //如果没有子节点则没有下拉单\n        }\n        item.selectMode = '';\n        item.parent = parent;\n        item.onSelect = ''; //初始化所有节点都没被选中\n        item.selectMode = 'Single';  //初始化时所有节点都为Single\n        return item\n    });\n}\n\n\nexport function getChecked(item) {   // 子选项的选择与否影响父选项\n    var childUnchecked = item.children.map(item => item.onSelect).indexOf('') !== -1;\n    var childChecked = item.children.map(item => item.onSelect).indexOf('checked') !== -1;\n    var childHalf = item.children.map(item => item.onSelect).indexOf('half') !== -1;\n    if (childUnchecked && !childChecked && !childHalf) return ''  //子选项都为空 父选项为空\n    else if (childChecked && !childUnchecked && !childHalf) return 'checked' //子选项全选 父选项为全选\n    else return 'half' //子选项部分选择 父选项为半选\n}\n\n\nexport function adjustChecked(item) {  // 父选项如果被勾选那么其子选项全部被勾选\n    let parent = item.parent;\n    while (parent) {  // 循环父级的父级直到根节点\n        parent.onSelect = getChecked(parent);\n        parent = parent.parent;\n    }\n    if (item.children && item.children.length > 0) adjust(item.children, item.onSelect);\n    function adjust(arr, checked) {  // 调整子选项与父选项保持一致\n        arr.forEach(item => {\n            item.onSelect = checked;\n            if (item.children && item.children.length > 0) adjust(item.children, item.onSelect);\n        })\n    }\n}\n\nexport function countCheck(item) {   // 改变selectMode的状态\n    if (item.parent) {\n        var counter = 0;\n        var childList = item.parent.children;\n        for (let i in childList) {\n            if (childList[i].onSelect == 'checked') {\n                counter++;\n                if (counter > 1) {\n                    item.parent.selectMode = 'Multiple';\n                    var grandParent = item.parent.parent\n                    while (grandParent) {\n                        grandParent.selectMode = 'Multiple';\n                        grandParent = grandParent.parent\n                    }\n                }\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}