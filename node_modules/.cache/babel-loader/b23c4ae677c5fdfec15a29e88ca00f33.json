{"ast":null,"code":"var _jsxFileName = \"/Users/jia/Desktop/react-tree-jia/src/components/tree/index.jsx\";\nimport React, { Component } from 'react';\nimport './index.css';\nimport Stack from '../utils/index.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Tree extends Component {\n  constructor(props) {\n    super(props); // 数的渲染用的是 treeData\n    // treeArray， treeObj 是把treeData 的数据结构调整了下，由于浅复制的存在，修改任意一个，其他数据也会变\n\n    this.state = {\n      treeData: {},\n      treeArray: [],\n      treeObj: {},\n      type: 'tree',\n      parentId: 'pid',\n      id: 'id',\n      value: 'value',\n      label: 'label',\n      children: 'children',\n      checkBox: false\n    };\n    this.checkMap = {\n      2: 'checked',\n      1: 'partChecked',\n      0: ''\n    };\n  }\n\n  componentWillMount() {\n    // 区分数数组和对象格式的数据\n    if (this.props.config.type.toLowerCase() === 'tree') {\n      this.setState({\n        treeData: this.props.treeData,\n        ...this.props.config\n      });\n    } else {\n      this.setState({\n        treeArray: this.props.treeData,\n        ...this.props.config\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.type.toLowerCase() !== 'tree') {\n      this.factoryArrayData();\n    } else {\n      this.factoryTreeData();\n    }\n  }\n\n  componentDidUpdate() {}\n\n  componentWillUnmount() {} // 把数组的数据 转成 树形数据\n  // 巧妙利用浅复制\n\n\n  factoryArrayData() {\n    // rootId 根节点的\n    let data = this.state.treeArray,\n        obj = {},\n        rootId = null; // console.log(data)\n\n    data.map((v, i) => {\n      if (v[this.state.parentId] || v[this.state.parentId] === 0) {\n        if (obj[v[this.state.parentId]]) {\n          if (obj[v[this.state.parentId]].children) {\n            obj[v[this.state.parentId]].children.push(v);\n          } else {\n            obj[v[this.state.parentId]].children = [v];\n          }\n        } else {\n          obj[v[this.state.parentId]] = {\n            children: [v]\n          };\n        }\n      } else {\n        // pid是null的， 把它的id作为根节点\n        rootId = v[this.state.id];\n      }\n\n      if (obj[v[this.state.id]]) {\n        v.children = obj[v[this.state.id]].children;\n      }\n\n      obj[v[this.state.id]] = v;\n    }); // console.log(obj[rootId])\n    // console.log(obj)\n\n    this.setState({\n      treeData: obj[rootId],\n      treeObj: obj\n    });\n  } // 把树形数据转成 一维对象类型 treeObj\n\n\n  factoryTreeData() {\n    let data = this.state.treeData; // console.log(data)\n\n    let stack = new Stack();\n    let obj = {};\n    stack.push(data);\n\n    while (stack.top) {\n      let node = stack.pop();\n\n      for (let i in node.children) {\n        stack.push(node.children[i]);\n      }\n\n      obj[node[this.state.id]] = node;\n    } // console.log(obj)\n\n\n    this.setState({\n      treeObj: obj\n    });\n  }\n\n  openNode(e, data) {\n    if (e.stopPropagation) {\n      e.stopPropagation();\n    } else {\n      window.event.cancelBubble = true;\n    }\n\n    data.open = !data.open;\n    this.forceUpdate();\n  }\n\n  selectNode(e, data) {\n    if (e.stopPropagation) {\n      e.stopPropagation();\n    } else {\n      window.event.cancelBubble = true;\n    }\n\n    this.setState({\n      selectVal: data[this.state.value]\n    }, () => {\n      if (this.props.nodeClick) {\n        this.props.nodeClick(data); // this.props.nodeClick(data[this.state.value])\n      }\n    });\n  }\n\n  selectCheckBox(e, data) {\n    if (e.stopPropagation) {\n      e.stopPropagation();\n    } else {\n      window.event.cancelBubble = true;\n    }\n\n    let check = data.checked; // 下面有孩子 就把孩子都选上\n\n    if (data.children && data.children.length) {\n      let stack = new Stack();\n      stack.push(data);\n\n      while (stack.top) {\n        let node = stack.pop();\n\n        for (let i in node.children) {\n          stack.push(node.children[i]);\n        }\n\n        if (check === 2) {\n          node.checked = 0;\n        } else {\n          node.checked = 2;\n        }\n      }\n    } else {\n      if (check === 2) {\n        data.checked = 0;\n      } else {\n        data.checked = 2;\n      }\n    } // 有父节点 就把父节点也更新了\n\n\n    if (data[this.state.parentId] || data[this.state.parentId] === 0) {\n      this.updateParentNode(data);\n    } else {\n      this.forceUpdate(); // 组件外部传递了selectChange方法 就调用\n\n      if (this.props.selectChange) {\n        this.getCheckedItems();\n      }\n    }\n  }\n\n  updateParentNode(data) {\n    // data[this.state.parentId] 只是为了获取所谓的id\n    let par = this.state.treeObj[data[this.state.parentId]],\n        checkLen = 0,\n        partChecked = false;\n\n    for (let i in par.children) {\n      if (par.children[i].checked === 2) {\n        checkLen++;\n      } else if (par.children[i].checked === 1) {\n        partChecked = true;\n        break;\n      }\n    } // 如果子孩子全都是选择的， 父节点就全选\n\n\n    if (checkLen === par.children.length) {\n      par.checked = 2; // 如果有子节点 不是全选的 父节点也不能全选\n    } else if (partChecked || checkLen < par.children.length && checkLen > 0) {\n      par.checked = 1;\n    } else {\n      // 一个也没选择的\n      par.checked = 0;\n    } // 如果还有父节点 解析往上更新\n\n\n    if (this.state.treeObj[par[this.state.parentId]] || this.state.treeObj[par[this.state.parentId]] == 0) {\n      this.updateParentNode(par);\n    } else {\n      this.forceUpdate();\n\n      if (this.props.selectChange) {\n        this.getCheckedItems();\n      }\n    }\n  }\n\n  getCheckedItems() {\n    let stack = new Stack();\n    let checkedArr = [];\n    stack.push(this.state.treeData);\n\n    while (stack.top) {\n      let node = stack.pop();\n\n      for (let i in node.children) {\n        stack.push(node.children[i]);\n      }\n\n      if (node.checked === 2) {\n        checkedArr.push(node[this.state.value]);\n      }\n    }\n\n    this.props.selectChange(checkedArr);\n  }\n\n  renderTreeParent() {\n    let data = this.state.treeData;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `parentNode childNode ${data.open ? 'open' : 'close'} ${data.children && data.children.length ? '' : 'noChildren'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: e => this.openNode(e, data),\n        className: \"openNode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this), this.state.checkBox ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `checkBox ${this.checkMap[data.checked]}`,\n        onClick: e => this.selectCheckBox(e, data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fileBox\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"./images/file-icon.png\",\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `nodeName ${this.state.selectVal === data[this.state.value] ? 'active' : ''}`,\n        onClick: e => this.selectNode(e, data),\n        children: data[this.state.label]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this), this.state.treeData.children ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"childList\",\n        children: this.renderTreeNode(data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 25\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }, this);\n  }\n\n  renderTreeNode(data) {\n    return data.children.map((val, ind) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `childNode ${val.open ? 'open' : 'close'} ${val.children && val.children.length ? '' : 'noChildren'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: e => this.openNode(e, val),\n          className: \"openNode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }, this), this.state.checkBox ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `checkBox ${this.checkMap[val.checked]}`,\n          onClick: e => this.selectCheckBox(e, val)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"fileBox\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"./images/file-icon.png\",\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 29\n        }, this), ind === data.children.length - 1 ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"lastNode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 25\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `nodeName ${this.state.selectVal === val[this.state.value] ? 'active' : ''}`,\n          onClick: e => this.selectNode(e, val),\n          children: val[this.state.label]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }, this), val.children ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"childList\",\n          children: this.renderTreeNode(val)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 29\n        }, this) : null]\n      }, ind, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }, this);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree\",\n      children: this.renderTreeParent()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Tree;","map":{"version":3,"sources":["/Users/jia/Desktop/react-tree-jia/src/components/tree/index.jsx"],"names":["React","Component","Stack","Tree","constructor","props","state","treeData","treeArray","treeObj","type","parentId","id","value","label","children","checkBox","checkMap","componentWillMount","config","toLowerCase","setState","componentDidMount","factoryArrayData","factoryTreeData","componentDidUpdate","componentWillUnmount","data","obj","rootId","map","v","i","push","stack","top","node","pop","openNode","e","stopPropagation","window","event","cancelBubble","open","forceUpdate","selectNode","selectVal","nodeClick","selectCheckBox","check","checked","length","updateParentNode","selectChange","getCheckedItems","par","checkLen","partChecked","checkedArr","renderTreeParent","renderTreeNode","val","ind","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './index.css';\nimport Stack from '../utils/index.jsx'\n\nclass Tree extends Component {\n    constructor(props) {\n        super(props)\n        // 数的渲染用的是 treeData\n        // treeArray， treeObj 是把treeData 的数据结构调整了下，由于浅复制的存在，修改任意一个，其他数据也会变\n        this.state = {\n            treeData: {},\n            treeArray: [],\n            treeObj: {},\n            type: 'tree',\n            parentId: 'pid',\n            id: 'id',\n            value: 'value',\n            label: 'label',\n            children: 'children',\n            checkBox: false\n        }\n        this.checkMap = {\n            2: 'checked',\n            1: 'partChecked',\n            0: ''\n        }\n    }\n    componentWillMount() {\n        // 区分数数组和对象格式的数据\n        if (this.props.config.type.toLowerCase() === 'tree') {\n            this.setState({\n                treeData: this.props.treeData,\n                ...this.props.config\n            })\n        } else {\n            this.setState({\n                treeArray: this.props.treeData,\n                ...this.props.config\n            })\n        }\n    }\n\n    componentDidMount() {\n        if (this.state.type.toLowerCase() !== 'tree') {\n            this.factoryArrayData()\n        } else {\n            this.factoryTreeData()\n        }\n    }\n\n    componentDidUpdate() {\n\n    }\n\n    componentWillUnmount() {\n\n    }\n\n    // 把数组的数据 转成 树形数据\n    // 巧妙利用浅复制\n    factoryArrayData() {\n        // rootId 根节点的\n        let data = this.state.treeArray, obj = {}, rootId = null;\n        // console.log(data)\n        data.map((v, i) => {\n            if (v[this.state.parentId] || v[this.state.parentId] === 0) {\n                if (obj[v[this.state.parentId]]) {\n                    if (obj[v[this.state.parentId]].children) {\n                        obj[v[this.state.parentId]].children.push(v)\n                    } else {\n                        obj[v[this.state.parentId]].children = [v]\n                    }\n                } else {\n                    obj[v[this.state.parentId]] = {\n                        children: [v]\n                    }\n                }\n            } else {\n                // pid是null的， 把它的id作为根节点\n                rootId = v[this.state.id]\n            }\n            if (obj[v[this.state.id]]) {\n                v.children = obj[v[this.state.id]].children\n            }\n            obj[v[this.state.id]] = v\n        })\n        // console.log(obj[rootId])\n        // console.log(obj)\n        this.setState({\n            treeData: obj[rootId],\n            treeObj: obj\n        })\n    }\n\n    // 把树形数据转成 一维对象类型 treeObj\n    factoryTreeData() {\n        let data = this.state.treeData\n        // console.log(data)\n        let stack = new Stack();\n        let obj = {};\n        stack.push(data);\n        while (stack.top) {\n            let node = stack.pop();\n            for (let i in node.children) {\n                stack.push(node.children[i])\n            }\n            obj[node[this.state.id]] = node\n        }\n        // console.log(obj)\n        this.setState({\n            treeObj: obj\n        })\n    }\n\n    openNode(e, data) {\n        if (e.stopPropagation) {\n            e.stopPropagation();\n        } else {\n            window.event.cancelBubble = true;\n        }\n        data.open = !data.open\n        this.forceUpdate()\n    }\n\n    selectNode(e, data) {\n        if (e.stopPropagation) {\n            e.stopPropagation();\n        } else {\n            window.event.cancelBubble = true;\n        }\n        this.setState({\n            selectVal: data[this.state.value]\n        }, () => {\n            if (this.props.nodeClick) {\n                this.props.nodeClick(data)\n                // this.props.nodeClick(data[this.state.value])\n            }\n        })\n    }\n\n    selectCheckBox(e, data) {\n        if (e.stopPropagation) {\n            e.stopPropagation();\n        } else {\n            window.event.cancelBubble = true;\n        }\n        let check = data.checked\n        // 下面有孩子 就把孩子都选上\n        if (data.children && data.children.length) {\n            let stack = new Stack();\n            stack.push(data);\n            while (stack.top) {\n                let node = stack.pop()\n                for (let i in node.children) {\n                    stack.push(node.children[i])\n                }\n                if (check === 2) {\n                    node.checked = 0;\n                } else {\n                    node.checked = 2\n                }\n            }\n        } else {\n            if (check === 2) {\n                data.checked = 0;\n            } else {\n                data.checked = 2\n            }\n        }\n        // 有父节点 就把父节点也更新了\n        if (data[this.state.parentId] || data[this.state.parentId] === 0) {\n            this.updateParentNode(data)\n        } else {\n            this.forceUpdate()\n            // 组件外部传递了selectChange方法 就调用\n            if (this.props.selectChange) {\n                this.getCheckedItems()\n            }\n        }\n    }\n\n    updateParentNode(data) {\n        // data[this.state.parentId] 只是为了获取所谓的id\n        let par = this.state.treeObj[data[this.state.parentId]],\n            checkLen = 0,\n            partChecked = false\n        for (let i in par.children) {\n            if (par.children[i].checked === 2) {\n                checkLen++;\n            } else if (par.children[i].checked === 1) {\n                partChecked = true;\n                break;\n            }\n        }\n        // 如果子孩子全都是选择的， 父节点就全选\n        if (checkLen === par.children.length) {\n            par.checked = 2\n            // 如果有子节点 不是全选的 父节点也不能全选\n        } else if (partChecked || (checkLen < par.children.length && checkLen > 0)) {\n            par.checked = 1;\n        } else {\n            // 一个也没选择的\n            par.checked = 0;\n        }\n        // 如果还有父节点 解析往上更新\n        if (this.state.treeObj[par[this.state.parentId]] || this.state.treeObj[par[this.state.parentId]] == 0) {\n            this.updateParentNode(par)\n        } else {\n            this.forceUpdate()\n            if (this.props.selectChange) {\n                this.getCheckedItems()\n            }\n        }\n    }\n\n    getCheckedItems() {\n        let stack = new Stack();\n        let checkedArr = [];\n        stack.push(this.state.treeData);\n        while (stack.top) {\n            let node = stack.pop();\n            for (let i in node.children) {\n                stack.push(node.children[i])\n            }\n            if (node.checked === 2) {\n                checkedArr.push(node[this.state.value])\n            }\n        }\n        this.props.selectChange(checkedArr)\n    }\n\n    renderTreeParent() {\n        let data = this.state.treeData\n        return (\n            <div className={`parentNode childNode ${data.open ? 'open' : 'close'} ${data.children && data.children.length ? '' : 'noChildren'}`}>\n                <span onClick={(e) => this.openNode(e, data)} className=\"openNode\"></span>\n                {\n                    this.state.checkBox ?\n                        <div className={`checkBox ${this.checkMap[data.checked]}`} onClick={(e) => this.selectCheckBox(e, data)}></div> :\n                        <div className=\"fileBox\">\n                            <img src=\"./images/file-icon.png\" alt=\"\" />\n                        </div>\n                }\n                <div className={`nodeName ${this.state.selectVal === data[this.state.value] ? 'active' : ''}`} onClick={(e) => this.selectNode(e, data)}>\n                    {data[this.state.label]}\n                </div>\n                {\n                    this.state.treeData.children ?\n                        <div className=\"childList\">\n                            {this.renderTreeNode(data)}\n                        </div> : null\n                }\n            </div>\n        )\n    }\n\n    renderTreeNode(data) {\n        return data.children.map((val, ind) => {\n            return (\n                <div key={ind} className={`childNode ${val.open ? 'open' : 'close'} ${val.children && val.children.length ? '' : 'noChildren'}`}>\n                    <span onClick={(e) => this.openNode(e, val)} className=\"openNode\"></span>\n                    {\n                        this.state.checkBox ?\n                            <div className={`checkBox ${this.checkMap[val.checked]}`} onClick={(e) => this.selectCheckBox(e, val)}></div> :\n                            <div className=\"fileBox\">\n                                <img src=\"./images/file-icon.png\" alt=\"\" />\n                            </div>\n                    }\n                    {ind === data.children.length - 1 ?\n                        <span className=\"lastNode\"></span> : null\n                    }\n                    <div className={`nodeName ${this.state.selectVal === val[this.state.value] ? 'active' : ''}`} onClick={(e) => this.selectNode(e, val)}>\n                        {val[this.state.label]}\n                    </div>\n                    {\n                        val.children ?\n                            <div className=\"childList\">\n                                {this.renderTreeNode(val)}\n                            </div> : null\n                    }\n                </div>\n            )\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"tree\">\n                {this.renderTreeParent()}\n            </div>\n        )\n    }\n}\nexport default Tree"]},"metadata":{},"sourceType":"module"}