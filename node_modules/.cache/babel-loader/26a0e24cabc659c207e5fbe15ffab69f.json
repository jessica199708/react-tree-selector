{"ast":null,"code":"var _jsxFileName = \"/Users/jia/Desktop/react-tree-jia/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './assets/tree.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(() => {\n  _s();\n\n  const [orgData, setData] = useState([{\n    id: 0,\n    title: '河北',\n    children: [{\n      id: 10,\n      title: '石家庄'\n    }, {\n      id: 11,\n      title: '唐山'\n    }, {\n      id: 12,\n      title: '秦皇岛'\n    }, {\n      id: 13,\n      title: '邯郸'\n    }]\n  }, {\n    id: 1,\n    title: '北京'\n  }, {\n    id: 2,\n    title: '上海'\n  }]);\n\n  function dataInit(data) {\n    data.map(item => {\n      if (item.children && item.children.length > 0) {\n        // item has children\n        item.open = 'opened';\n        itemdataInit(item.children);\n      } else {\n        item.open = 'closed';\n      }\n\n      item.checked = '';\n    });\n  }\n\n  dataInit(orgData);\n\n  const Tree = ({\n    data\n  }) => /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"tree\",\n    children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: `tree-item ${item.open}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `folder ${item.open}`,\n          onClick: () => {\n            if (item.open == 'opened') {\n              item.open = 'closed';\n            } else {\n              item.open = 'opened';\n            }\n\n            setData([...orgData]);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `checkbox ${item.checked}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item\",\n          children: item.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this), item.children ? /*#__PURE__*/_jsxDEV(Tree, {\n        data: item.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }, this) : '']\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Tree, {\n    data: orgData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 12\n  }, this);\n}, \"CsnNLAFy+F4Kc/fqJqrtjDLSO1U=\");","map":{"version":3,"sources":["/Users/jia/Desktop/react-tree-jia/src/App.js"],"names":["React","useState","orgData","setData","id","title","children","dataInit","data","map","item","length","open","itemdataInit","checked","Tree"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './assets/tree.css'\n\nexport default () => {\n    const [orgData, setData] = useState([\n        {\n            id: 0, title: '河北', children: [\n                { id: 10, title: '石家庄' },\n                { id: 11, title: '唐山' },\n                { id: 12, title: '秦皇岛' },\n                { id: 13, title: '邯郸' },\n            ]\n        },\n        { id: 1, title: '北京' },\n        { id: 2, title: '上海' }\n    ]);\n    function dataInit(data) {\n        data.map(item => {\n            if (item.children && item.children.length > 0) { // item has children\n                item.open = 'opened';\n                itemdataInit(item.children)\n            } else {\n                item.open = 'closed';\n            }\n            item.checked = '';\n\n        })\n    }\n    dataInit(orgData);\n\n\n    const Tree = ({ data }) => (\n        <ul className='tree'>\n            {data.map(item => (\n                <li className={`tree-item ${item.open}`} key={item.id}>\n                    <div className='tree-title'>\n                        <div className={`folder ${item.open}`} onClick={() => {\n                            if (item.open == 'opened') {\n                                item.open = 'closed'\n                            } else {\n                                item.open = 'opened'\n                            }\n                            setData([...orgData]);\n                        }} />\n                        <div className={`checkbox ${item.checked}`} />\n                        <div className='item'>{item.title}</div>\n                    </div>\n                    {item.children ? (\n                        <Tree data={item.children} />\n                    ) : ''}\n                </li>\n            ))}\n        </ul>\n\n    )\n    return <Tree data={orgData} />\n}"]},"metadata":{},"sourceType":"module"}