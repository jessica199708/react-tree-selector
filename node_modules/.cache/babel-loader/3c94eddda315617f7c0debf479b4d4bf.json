{"ast":null,"code":"var _jsxFileName = \"/Users/jia/Desktop/react-tree-selector/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { dataInit, adjustChecked, countCheck } from './assets/tree.jsx';\nimport './assets/tree.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(() => {\n  _s();\n\n  const [orgData, setData] = useState(dataInit([// Hook使得function组件有状态，第一次渲染时初始化数据\n  {\n    id: 0,\n    title: '浙江',\n    children: [{\n      id: 10,\n      title: '杭州',\n      children: [{\n        id: 100,\n        title: '上城区'\n      }, {\n        id: 101,\n        title: '下城区'\n      }, {\n        id: 102,\n        title: '江干区'\n      }, {\n        id: 103,\n        title: '拱墅区'\n      }, {\n        id: 104,\n        title: '西湖区'\n      }, {\n        id: 105,\n        title: '滨江区'\n      }, {\n        id: 106,\n        title: '萧山区'\n      }]\n    }, {\n      id: 11,\n      title: '宁波',\n      children: [{\n        id: 110,\n        title: '余姚市'\n      }, {\n        id: 111,\n        title: '慈溪市'\n      }, {\n        id: 112,\n        title: '奉化市'\n      }]\n    }]\n  }, {\n    id: 1,\n    title: '江苏',\n    children: [{\n      id: 20,\n      title: '南京'\n    }, {\n      id: 21,\n      title: '南通'\n    }, {\n      id: 22,\n      title: '无锡'\n    }, {\n      id: 23,\n      title: '扬州'\n    }, {\n      id: 24,\n      title: '苏州'\n    }, {\n      id: 25,\n      title: '连云港'\n    }]\n  }, {\n    id: 2,\n    title: '上海'\n  }], null)); // 根节点的父组件为空\n  //     // 初始化数据\n  //     function dataInit(data, parent) {\n  //         return data.map(item => {\n  //             if (item.children && item.children.length > 0) { // 如果当前节点有子节点\n  //                 item.open = 'close';  // 初始化的时候所有子节点收起\n  //                 item.children = dataInit(item.children, item);  // 递归其子节点\n  //             } else {\n  //                 item.open = ''; //如果没有子节点则没有下拉单\n  //             }\n  //             item.selectMode = '';\n  //             item.parent = parent;\n  //             item.onSelect = ''; //初始化所有节点都没被选中\n  //             item.selectMode = 'Single';  //初始化时所有节点都为Single\n  //             return item\n  //         });\n  //     }\n  //     function getChecked(item) {   // 子选项的选择与否影响父选项\n  //         var childUnchecked = item.children.map(item => item.onSelect).indexOf('') !== -1;\n  //         var childChecked = item.children.map(item => item.onSelect).indexOf('checked') !== -1;\n  //         var childHalf = item.children.map(item => item.onSelect).indexOf('half') !== -1;\n  //         if (childUnchecked && !childChecked && !childHalf) return ''  //子选项都为空 父选项为空\n  //         else if (childChecked && !childUnchecked && !childHalf) return 'checked' //子选项全选 父选项为全选\n  //         else return 'half' //子选项部分选择 父选项为半选\n  //     }\n  //     function adjustChecked(item) {  // 父选项如果被勾选那么其子选项全部被勾选\n  //         let parent = item.parent;\n  //         while (parent) {  // 循环父级的父级直到根节点\n  //             parent.onSelect = getChecked(parent);\n  //             parent = parent.parent;\n  //         }\n  //         if (item.children && item.children.length > 0) adjust(item.children, item.onSelect);\n  //         function adjust(arr, checked) {  // 调整子选项与父选项保持一致\n  //             arr.forEach(item => {\n  //                 item.onSelect = checked;\n  //                 if (item.children && item.children.length > 0) adjust(item.children, item.onSelect);\n  //             })\n  //         }\n  //     }\n  //     function countCheck(item) {   // 改变selectMode的状态\n  //         if (item.parent) {\n  //             var counter = 0;\n  //             var childList = item.parent.children;\n  //             for (let i in childList) {\n  //                 if (childList[i].onSelect == 'checked') {\n  //                     counter++;\n  //                     if (counter > 1) {\n  //                         item.parent.selectMode = 'Multiple';\n  //                         var grandParent = item.parent.parent\n  //                         while (grandParent) {\n  //                             grandParent.selectMode = 'Multiple';\n  //                             grandParent = grandParent.parent\n  //                         }\n  //                     }\n  //                 }\n  //             }\n  //         }\n  //     }\n\n  const Tree = ({\n    data\n  }) =>\n  /*#__PURE__*/\n  // 树形选择组件\n  _jsxDEV(\"ul\", {\n    className: \"tree\",\n    children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: `tree-item ${item.open}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `folder ${item.open}`,\n          onClick: () => {\n            // 是否点击下拉菜单打开子选项\n            if (item.open !== '') {\n              if (item.open == 'open') {\n                item.open = 'close';\n              } else {\n                item.open = 'open';\n              }\n\n              setData([...orgData]); // 重新渲染更新状态后的数据\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `checkbox ${item.onSelect}`,\n          onClick: () => {\n            // 是否选择当前选项\n            if (item.onSelect == '') {\n              item.onSelect = 'checked';\n            } else {\n              item.onSelect = '';\n            }\n\n            adjustChecked(item);\n            countCheck(item);\n            setData([...orgData]); // 重新渲染更新状态后的数据\n\n            console.log(orgData); // console.log(item) // 当前被选中的项 \n            // eg: {id: 20, title: \"南京\", open: \"\", parent: {…}, onSelect: \"checked\"}\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item\",\n          children: item.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this), item.children ? /*#__PURE__*/_jsxDEV(Tree, {\n        data: item.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }, this) : '']\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Tree, {\n    data: orgData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 12\n  }, this);\n}, \"88QGQ/se9vHJUna8pXWEUlNDZic=\");","map":{"version":3,"sources":["/Users/jia/Desktop/react-tree-selector/src/App.js"],"names":["React","useState","dataInit","adjustChecked","countCheck","orgData","setData","id","title","children","Tree","data","map","item","open","onSelect","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { dataInit, adjustChecked, countCheck} from './assets/tree.jsx'\nimport './assets/tree.css'\n\nexport default () => {\n    const [orgData, setData] = useState(dataInit([   // Hook使得function组件有状态，第一次渲染时初始化数据\n        {\n            id: 0, title: '浙江', children: [\n                {\n                    id: 10, title: '杭州', children: [\n                        { id: 100, title: '上城区' },\n                        { id: 101, title: '下城区' },\n                        { id: 102, title: '江干区' },\n                        { id: 103, title: '拱墅区' },\n                        { id: 104, title: '西湖区' },\n                        { id: 105, title: '滨江区' },\n                        { id: 106, title: '萧山区' },\n\n                    ]\n                },\n                {\n                    id: 11, title: '宁波', children: [\n                        { id: 110, title: '余姚市' },\n                        { id: 111, title: '慈溪市' },\n                        { id: 112, title: '奉化市' },\n                    ]\n                }\n            ]\n        },\n        {\n            id: 1, title: '江苏', children: [\n                { id: 20, title: '南京' },\n                { id: 21, title: '南通' },\n                { id: 22, title: '无锡' },\n                { id: 23, title: '扬州' },\n                { id: 24, title: '苏州' },\n                { id: 25, title: '连云港' },\n            ]\n        },\n        { id: 2, title: '上海' }\n    ], null));  // 根节点的父组件为空\n\n//     // 初始化数据\n//     function dataInit(data, parent) {\n//         return data.map(item => {\n//             if (item.children && item.children.length > 0) { // 如果当前节点有子节点\n//                 item.open = 'close';  // 初始化的时候所有子节点收起\n//                 item.children = dataInit(item.children, item);  // 递归其子节点\n//             } else {\n//                 item.open = ''; //如果没有子节点则没有下拉单\n//             }\n//             item.selectMode = '';\n//             item.parent = parent;\n//             item.onSelect = ''; //初始化所有节点都没被选中\n//             item.selectMode = 'Single';  //初始化时所有节点都为Single\n//             return item\n//         });\n//     }\n\n//     function getChecked(item) {   // 子选项的选择与否影响父选项\n//         var childUnchecked = item.children.map(item => item.onSelect).indexOf('') !== -1;\n//         var childChecked = item.children.map(item => item.onSelect).indexOf('checked') !== -1;\n//         var childHalf = item.children.map(item => item.onSelect).indexOf('half') !== -1;\n//         if (childUnchecked && !childChecked && !childHalf) return ''  //子选项都为空 父选项为空\n//         else if (childChecked && !childUnchecked && !childHalf) return 'checked' //子选项全选 父选项为全选\n//         else return 'half' //子选项部分选择 父选项为半选\n//     }\n\n\n\n//     function adjustChecked(item) {  // 父选项如果被勾选那么其子选项全部被勾选\n//         let parent = item.parent;\n//         while (parent) {  // 循环父级的父级直到根节点\n//             parent.onSelect = getChecked(parent);\n//             parent = parent.parent;\n//         }\n//         if (item.children && item.children.length > 0) adjust(item.children, item.onSelect);\n//         function adjust(arr, checked) {  // 调整子选项与父选项保持一致\n//             arr.forEach(item => {\n//                 item.onSelect = checked;\n//                 if (item.children && item.children.length > 0) adjust(item.children, item.onSelect);\n//             })\n//         }\n//     }\n\n//     function countCheck(item) {   // 改变selectMode的状态\n//         if (item.parent) {\n//             var counter = 0;\n//             var childList = item.parent.children;\n//             for (let i in childList) {\n//                 if (childList[i].onSelect == 'checked') {\n//                     counter++;\n//                     if (counter > 1) {\n//                         item.parent.selectMode = 'Multiple';\n//                         var grandParent = item.parent.parent\n//                         while (grandParent) {\n//                             grandParent.selectMode = 'Multiple';\n//                             grandParent = grandParent.parent\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n\n    const Tree = ({ data }) => (   // 树形选择组件\n        <ul className='tree'>\n            {data.map(item => (\n                <li className={`tree-item ${item.open}`} key={item.id}>\n                    <div className='tree-title'>\n                        <div className={`folder ${item.open}`} onClick={() => {  // 是否点击下拉菜单打开子选项\n                            if (item.open !== '') {\n                                if (item.open == 'open') {\n                                    item.open = 'close';\n                                } else {\n                                    item.open = 'open';\n                                }\n                                setData([...orgData]);  // 重新渲染更新状态后的数据\n                            }\n                        }} />\n                        <div className={`checkbox ${item.onSelect}`} onClick={() => {  // 是否选择当前选项\n                            if (item.onSelect == '') {\n                                item.onSelect = 'checked';\n                            } else {\n                                item.onSelect = '';\n                            }\n                            adjustChecked(item);\n                            countCheck(item);\n                            setData([...orgData]); // 重新渲染更新状态后的数据\n                            console.log(orgData)\n                            // console.log(item) // 当前被选中的项 \n                            // eg: {id: 20, title: \"南京\", open: \"\", parent: {…}, onSelect: \"checked\"}\n                        }} />\n                        <div className='item'>{item.title}</div>\n                    </div>\n                    {item.children ? (\n                        <Tree data={item.children} />\n                    ) : ''}\n                </li>\n            ))}\n        </ul>\n    );\n\n    return <Tree data={orgData} />\n}"]},"metadata":{},"sourceType":"module"}