{"ast":null,"code":"var _jsxFileName = \"/Users/jia/Desktop/react-tree-jia/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './assets/tree.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(() => {\n  _s();\n\n  const [orgData, setData] = useState(dataInit([{\n    id: 0,\n    title: '浙江',\n    children: [{\n      id: 10,\n      title: '杭州',\n      childrem\n    }, {\n      id: 11,\n      title: '宁波'\n    }, {\n      id: 12,\n      title: '绍兴'\n    }, {\n      id: 13,\n      title: '金华'\n    }]\n  }, {\n    id: 1,\n    title: '江苏',\n    children: [{\n      id: 20,\n      title: '南京'\n    }, {\n      id: 21,\n      title: '南通'\n    }, {\n      id: 22,\n      title: '无锡'\n    }, {\n      id: 23,\n      title: '扬州'\n    }, {\n      id: 24,\n      title: '苏州'\n    }, {\n      id: 25,\n      title: '连云港'\n    }]\n  }, {\n    id: 2,\n    title: '上海'\n  }], null));\n\n  function dataInit(data, parent) {\n    return data.map(item => {\n      if (item.children && item.children.length > 0) {\n        // item has children\n        item.open = 'close';\n        item.children = dataInit(item.children, item);\n      } else {\n        item.open = '';\n      }\n\n      item.parent = parent;\n      item.checked = '';\n      return item;\n    });\n  }\n\n  function getChecked(item) {\n    var childUnchecked = item.children.map(item => item.checked).indexOf('') != -1;\n    var childChecked = item.children.map(item => item.checked).indexOf('checked') != -1;\n    var childHalf = item.children.map(item => item.checked).indexOf('half') != -1;\n    if (childUnchecked && !childChecked && !childHalf) return ''; //子选项都为空 父选项为空\n    else if (childChecked && !childUnchecked && !childHalf) return 'checked'; //子选项全选 父选项为全选\n    else return 'half'; //子选项部分选择 父选项为半选\n  }\n\n  function adjustChecked(item) {\n    let parent = item.parent;\n\n    while (parent) {\n      //循环父级的父级\n      parent.checked = getChecked(parent);\n      parent = parent.parent;\n    }\n\n    if (item.children && item.children.length > 0) adjust(item.children, item.checked);\n\n    function adjust(arr, checked) {\n      arr.forEach(item => {\n        item.checked = checked;\n        if (item.children && item.children.length > 0) adjust(item.children, item.checked);\n      });\n    }\n  }\n\n  const Tree = ({\n    data\n  }) => /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"tree\",\n    children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: `tree-item ${item.open}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `folder ${item.open}`,\n          onClick: () => {\n            if (item.open !== '') {\n              if (item.open == 'open') {\n                item.open = 'close';\n              } else {\n                item.open = 'open';\n              }\n\n              setData([...orgData]);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `checkbox ${item.checked}`,\n          onClick: () => {\n            if (item.checked == '') {\n              item.checked = 'checked';\n            } else {\n              item.checked = '';\n            }\n\n            adjustChecked(item);\n            setData([...orgData]);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item\",\n          children: item.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this), item.children ? /*#__PURE__*/_jsxDEV(Tree, {\n        data: item.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }, this) : '']\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Tree, {\n    data: orgData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 12\n  }, this);\n}, \"UYrwCEvYDAKJ7oa5u6kiYa7Ytto=\");","map":{"version":3,"sources":["/Users/jia/Desktop/react-tree-jia/src/App.js"],"names":["React","useState","orgData","setData","dataInit","id","title","children","childrem","data","parent","map","item","length","open","checked","getChecked","childUnchecked","indexOf","childChecked","childHalf","adjustChecked","adjust","arr","forEach","Tree"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './assets/tree.css'\n\nexport default () => {\n    const [orgData, setData] = useState(dataInit([\n        {\n            id: 0, title: '浙江', children: [\n                { id: 10, title: '杭州' , childrem},\n                { id: 11, title: '宁波' },\n                { id: 12, title: '绍兴' },\n                { id: 13, title: '金华' },\n            ]\n        },\n        {\n            id: 1, title: '江苏', children: [\n                { id: 20, title: '南京' },\n                { id: 21, title: '南通' },\n                { id: 22, title: '无锡' },\n                { id: 23, title: '扬州' },\n                { id: 24, title: '苏州' },\n                { id: 25, title: '连云港' },\n            ]\n        },\n        { id: 2, title: '上海' }\n    ], null));\n\n\n    function dataInit(data, parent) {\n        return data.map(item => {\n            if (item.children && item.children.length > 0) { // item has children\n                item.open = 'close';\n                item.children = dataInit(item.children, item);\n            } else {\n                item.open = '';\n            }\n            item.parent = parent;\n            item.checked = '';\n            return item\n        });\n    }\n\n    function getChecked(item) {\n        var childUnchecked = item.children.map(item => item.checked).indexOf('') != -1;\n        var childChecked = item.children.map(item => item.checked).indexOf('checked') != -1;\n        var childHalf = item.children.map(item => item.checked).indexOf('half') != -1;\n        if (childUnchecked && !childChecked && !childHalf) return ''  //子选项都为空 父选项为空\n        else if (childChecked && !childUnchecked && !childHalf) return 'checked' //子选项全选 父选项为全选\n        else return 'half' //子选项部分选择 父选项为半选\n    }\n    function adjustChecked(item) {\n        let parent = item.parent;\n        while (parent) {  //循环父级的父级\n            parent.checked = getChecked(parent);\n            parent = parent.parent;\n        }\n        if (item.children && item.children.length > 0) adjust(item.children, item.checked);\n        function adjust(arr, checked) {\n            arr.forEach(item => {\n                item.checked = checked;\n                if (item.children && item.children.length > 0) adjust(item.children, item.checked);\n            })\n        }\n\n    }\n\n\n    const Tree = ({ data }) => (\n        <ul className='tree'>\n            {data.map(item => (\n                <li className={`tree-item ${item.open}`} key={item.id}>\n                    <div className='tree-title'>\n                        <div className={`folder ${item.open}`} onClick={() => {\n                            if (item.open !== '') {\n                                if (item.open == 'open') {\n                                    item.open = 'close';\n                                } else {\n                                    item.open = 'open';\n                                }\n                                setData([...orgData]);\n                            }\n                        }} />\n                        <div className={`checkbox ${item.checked}`} onClick={() => {\n                            if (item.checked == '') {\n                                item.checked = 'checked';\n                            } else {\n                                item.checked = '';\n                            }\n                            adjustChecked(item);\n\n                            setData([...orgData]);\n                        }} />\n                        <div className='item'>{item.title}</div>\n                    </div>\n                    {item.children ? (\n                        <Tree data={item.children} />\n                    ) : ''}\n                </li>\n            ))}\n        </ul>\n    );\n    return <Tree data={orgData} />\n}"]},"metadata":{},"sourceType":"module"}