{"ast":null,"code":"var _jsxFileName = \"/Users/jia/Desktop/react-tree-jia/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './assets/tree.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(() => {\n  _s();\n\n  const [orgData, setData] = useState(dataInit([// Hook使得function组件有状态，第一次渲染时初始化数据\n  {\n    id: 0,\n    title: '浙江',\n    children: [{\n      id: 10,\n      title: '杭州',\n      children: [{\n        id: 100,\n        title: '上城区'\n      }, {\n        id: 101,\n        title: '下城区'\n      }, {\n        id: 102,\n        title: '江干区'\n      }, {\n        id: 103,\n        title: '拱墅区'\n      }, {\n        id: 104,\n        title: '西湖区'\n      }, {\n        id: 105,\n        title: '滨江区'\n      }, {\n        id: 106,\n        title: '萧山区'\n      }]\n    }, {\n      id: 11,\n      title: '宁波',\n      children: [{\n        id: 110,\n        title: '余姚市'\n      }, {\n        id: 111,\n        title: '慈溪市'\n      }, {\n        id: 112,\n        title: '奉化市'\n      }]\n    }]\n  }, {\n    id: 1,\n    title: '江苏',\n    children: [{\n      id: 20,\n      title: '南京'\n    }, {\n      id: 21,\n      title: '南通'\n    }, {\n      id: 22,\n      title: '无锡'\n    }, {\n      id: 23,\n      title: '扬州'\n    }, {\n      id: 24,\n      title: '苏州'\n    }, {\n      id: 25,\n      title: '连云港'\n    }]\n  }, {\n    id: 2,\n    title: '上海'\n  }], null)); // 根节点的父组件为空\n  // 初始化数据\n\n  function dataInit(data, parent) {\n    return data.map(item => {\n      if (item.children && item.children.length > 0) {\n        // 如果当前节点有子节点\n        item.open = 'close'; // 初始化的时候所有子节点收起\n\n        item.children = dataInit(item.children, item); // 递归其子节点\n      } else {\n        item.open = ''; //如果没有子节点则没有下拉单\n      }\n\n      item.selectMode;\n      item.parent = parent;\n      item.onSelect = ''; //初始化所有节点都没被选中\n\n      return item;\n    });\n  }\n\n  function getChecked(item) {\n    // 子选项的选择与否影响父选项\n    var childUnchecked = item.children.map(item => item.onSelect).indexOf('') !== -1;\n    var childChecked = item.children.map(item => item.onSelect).indexOf('checked') !== -1;\n    var childHalf = item.children.map(item => item.onSelect).indexOf('half') !== -1;\n    if (childUnchecked && !childChecked && !childHalf) return ''; //子选项都为空 父选项为空\n    else if (childChecked && !childUnchecked && !childHalf) return 'checked'; //子选项全选 父选项为全选\n    else return 'half'; //子选项部分选择 父选项为半选\n  }\n\n  function adjustChecked(item) {\n    // 父选项如果被勾选那么其子选项全部被勾选\n    let parent = item.parent;\n\n    while (parent) {\n      // 循环父级的父级直到根节点\n      parent.onSelect = getChecked(parent);\n      parent = parent.parent;\n    }\n\n    if (item.children && item.children.length > 0) adjust(item.children, item.onSelect);\n\n    function adjust(arr, checked) {\n      // 调整子选项与父选项保持一致\n      arr.forEach(item => {\n        item.onSelect = checked;\n        if (item.children && item.children.length > 0) adjust(item.children, item.onSelect);\n      });\n    }\n  }\n\n  const Tree = ({\n    data\n  }) =>\n  /*#__PURE__*/\n  // 树形选择组件\n  _jsxDEV(\"ul\", {\n    className: \"tree\",\n    children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: `tree-item ${item.open}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `folder ${item.open}`,\n          onClick: () => {\n            // 是否点击下拉菜单打开子选项\n            if (item.open !== '') {\n              if (item.open == 'open') {\n                item.open = 'close';\n              } else {\n                item.open = 'open';\n              }\n\n              setData([...orgData]); // 重新渲染更新状态后的数据\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `checkbox ${item.onSelect}`,\n          onClick: () => {\n            // 是否选择当前选项\n            if (item.onSelect == '') {\n              item.onSelect = 'checked';\n            } else {\n              item.onSelect = '';\n            }\n\n            adjustChecked(item);\n            setData([...orgData]); // 重新渲染更新状态后的数据\n\n            console.log(item); // 当前被选中的项 \n            // eg: {id: 20, title: \"南京\", open: \"\", parent: {…}, onSelect: \"checked\"}\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item\",\n          children: item.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), item.children ? /*#__PURE__*/_jsxDEV(Tree, {\n        data: item.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }, this) : '']\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Tree, {\n    data: orgData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 12\n  }, this);\n}, \"88QGQ/se9vHJUna8pXWEUlNDZic=\");","map":{"version":3,"sources":["/Users/jia/Desktop/react-tree-jia/src/App.js"],"names":["React","useState","orgData","setData","dataInit","id","title","children","data","parent","map","item","length","open","selectMode","onSelect","getChecked","childUnchecked","indexOf","childChecked","childHalf","adjustChecked","adjust","arr","checked","forEach","Tree","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './assets/tree.css'\n\nexport default () => {\n    const [orgData, setData] = useState(dataInit([   // Hook使得function组件有状态，第一次渲染时初始化数据\n        {\n            id: 0, title: '浙江', children: [\n                {\n                    id: 10, title: '杭州', children: [\n                        { id: 100, title: '上城区' },\n                        { id: 101, title: '下城区' },\n                        { id: 102, title: '江干区' },\n                        { id: 103, title: '拱墅区' },\n                        { id: 104, title: '西湖区' },\n                        { id: 105, title: '滨江区' },\n                        { id: 106, title: '萧山区' },\n\n                    ]\n                },\n                {\n                    id: 11, title: '宁波', children: [\n                        { id: 110, title: '余姚市' },\n                        { id: 111, title: '慈溪市' },\n                        { id: 112, title: '奉化市' },\n                    ]\n                }\n            ]\n        },\n        {\n            id: 1, title: '江苏', children: [\n                { id: 20, title: '南京' },\n                { id: 21, title: '南通' },\n                { id: 22, title: '无锡' },\n                { id: 23, title: '扬州' },\n                { id: 24, title: '苏州' },\n                { id: 25, title: '连云港' },\n            ]\n        },\n        { id: 2, title: '上海' }\n    ], null));  // 根节点的父组件为空\n\n    // 初始化数据\n    function dataInit(data, parent) {\n        return data.map(item => {\n            if (item.children && item.children.length > 0) { // 如果当前节点有子节点\n                item.open = 'close';  // 初始化的时候所有子节点收起\n                item.children = dataInit(item.children, item);  // 递归其子节点\n            } else {\n                item.open = ''; //如果没有子节点则没有下拉单\n            }\n            item.selectMode\n            item.parent = parent;\n            item.onSelect = ''; //初始化所有节点都没被选中\n            return item\n        });\n    }\n\n    function getChecked(item) {   // 子选项的选择与否影响父选项\n        var childUnchecked = item.children.map(item => item.onSelect).indexOf('') !== -1;\n        var childChecked = item.children.map(item => item.onSelect).indexOf('checked') !== -1;\n        var childHalf = item.children.map(item => item.onSelect).indexOf('half') !== -1;\n        if (childUnchecked && !childChecked && !childHalf) return ''  //子选项都为空 父选项为空\n        else if (childChecked && !childUnchecked && !childHalf) return 'checked' //子选项全选 父选项为全选\n        else return 'half' //子选项部分选择 父选项为半选\n    }\n\n    function adjustChecked(item) {  // 父选项如果被勾选那么其子选项全部被勾选\n        let parent = item.parent;\n        while (parent) {  // 循环父级的父级直到根节点\n            parent.onSelect = getChecked(parent);\n            parent = parent.parent;\n        }\n        if (item.children && item.children.length > 0) adjust(item.children, item.onSelect);\n        function adjust(arr, checked) {  // 调整子选项与父选项保持一致\n            arr.forEach(item => {\n                item.onSelect = checked;\n                if (item.children && item.children.length > 0) adjust(item.children, item.onSelect);\n            })\n        }\n    }\n\n    const Tree = ({ data }) => (   // 树形选择组件\n        <ul className='tree'>\n            {data.map(item => (\n                <li className={`tree-item ${item.open}`} key={item.id}>\n                    <div className='tree-title'>\n                        <div className={`folder ${item.open}`} onClick={() => {  // 是否点击下拉菜单打开子选项\n                            if (item.open !== '') {\n                                if (item.open == 'open') {\n                                    item.open = 'close';\n                                } else {\n                                    item.open = 'open';\n                                }\n                                setData([...orgData]);  // 重新渲染更新状态后的数据\n                            }\n                        }} />\n                        <div className={`checkbox ${item.onSelect}`} onClick={() => {  // 是否选择当前选项\n                            if (item.onSelect == '') {\n                                item.onSelect = 'checked';\n                            } else {\n                                item.onSelect = '';\n                            }\n                            adjustChecked(item);\n                            setData([...orgData]); // 重新渲染更新状态后的数据\n                            console.log(item) // 当前被选中的项 \n                            // eg: {id: 20, title: \"南京\", open: \"\", parent: {…}, onSelect: \"checked\"}\n                        }} />\n                        <div className='item'>{item.title}</div>\n                    </div>\n                    {item.children ? (\n                        <Tree data={item.children} />\n                    ) : ''}\n                </li>\n            ))}\n        </ul>\n    );\n\n    return <Tree data={orgData} />\n}"]},"metadata":{},"sourceType":"module"}