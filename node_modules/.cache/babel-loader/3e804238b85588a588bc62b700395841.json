{"ast":null,"code":"import React, { useState } from 'react';\nimport { dataInit, adjustChecked, countCheck } from './assets/tree.jsx';\nimport Tree from './assets/index';\nimport './assets/tree.css';\n\nclass App extends React.Component {\n  render() {\n    return;\n  }\n\n}\n\nexport default App; // export default () => {\n//     const [orgData, setData] = useState(dataInit([   // Hook使得function组件有状态，第一次渲染时初始化数据\n//         {\n//             id: 0, title: '浙江', children: [\n//                 {\n//                     id: 10, title: '杭州', children: [\n//                         { id: 100, title: '上城区' },\n//                         { id: 101, title: '下城区' },\n//                         { id: 102, title: '江干区' },\n//                         { id: 103, title: '拱墅区' },\n//                         { id: 104, title: '西湖区' },\n//                         { id: 105, title: '滨江区' },\n//                         { id: 106, title: '萧山区' },\n//                     ]\n//                 },\n//                 {\n//                     id: 11, title: '宁波', children: [\n//                         { id: 110, title: '余姚市' },\n//                         { id: 111, title: '慈溪市' },\n//                         { id: 112, title: '奉化市' },\n//                     ]\n//                 }\n//             ]\n//         },\n//         {\n//             id: 1, title: '江苏', children: [\n//                 { id: 20, title: '南京' },\n//                 { id: 21, title: '南通' },\n//                 { id: 22, title: '无锡' },\n//                 { id: 23, title: '扬州' },\n//                 { id: 24, title: '苏州' },\n//                 { id: 25, title: '连云港' },\n//             ]\n//         },\n//         { id: 2, title: '上海' }\n//     ], null));  // 根节点的父组件为空\n//     const Tree = ({ data }) => (   // 树形选择组件\n//         <ul className='tree'>\n//             {data.map(item => (\n//                 <li className={`tree-item ${item.open}`} key={item.id}>\n//                     <div className='tree-title'>\n//                         <div className={`folder ${item.open}`} onClick={() => {  // 是否点击下拉菜单打开子选项\n//                             if (item.open !== '') {\n//                                 if (item.open == 'open') {\n//                                     item.open = 'close';\n//                                 } else {\n//                                     item.open = 'open';\n//                                 }\n//                                 setData([...orgData]);  // 重新渲染更新状态后的数据\n//                             }\n//                         }} />\n//                         <div className={`checkbox ${item.onSelect}`} onClick={() => {  // 是否选择当前选项\n//                             if (item.onSelect == '') {\n//                                 item.onSelect = 'checked';\n//                             } else {\n//                                 item.onSelect = '';\n//                             }\n//                             adjustChecked(item);\n//                             countCheck(item);\n//                             setData([...orgData]); // 重新渲染更新状态后的数据\n//                             console.log(orgData)\n//                             // console.log(item) // 当前被选中的项 \n//                             // eg: {id: 20, title: \"南京\", open: \"\", parent: {…}, onSelect: \"checked\"}\n//                         }} />\n//                         <div className='item'>{item.title}</div>\n//                     </div>\n//                     {item.children ? (\n//                         <Tree data={item.children} />\n//                     ) : ''}\n//                 </li>\n//             ))}\n//         </ul>\n//     );\n//     return <Tree data={orgData} />\n// }","map":{"version":3,"sources":["/Users/jia/Desktop/react-tree-selector/src/App.js"],"names":["React","useState","dataInit","adjustChecked","countCheck","Tree","App","Component","render"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,aAAnB,EAAkCC,UAAlC,QAAmD,mBAAnD;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAO,mBAAP;;AAEA,MAAMC,GAAN,SAAkBN,KAAK,CAACO,SAAxB,CAAkC;AAC9BC,EAAAA,MAAM,GAAE;AACJ;AACH;;AAH6B;;AAMlC,eAAeF,GAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import React, { useState } from 'react';\nimport { dataInit, adjustChecked, countCheck} from './assets/tree.jsx'\nimport Tree from './assets/index'\nimport './assets/tree.css'\n\nclass App extends React.Component {\n    render(){\n        return \n    }\n\n}\nexport default App;\n// export default () => {\n//     const [orgData, setData] = useState(dataInit([   // Hook使得function组件有状态，第一次渲染时初始化数据\n//         {\n//             id: 0, title: '浙江', children: [\n//                 {\n//                     id: 10, title: '杭州', children: [\n//                         { id: 100, title: '上城区' },\n//                         { id: 101, title: '下城区' },\n//                         { id: 102, title: '江干区' },\n//                         { id: 103, title: '拱墅区' },\n//                         { id: 104, title: '西湖区' },\n//                         { id: 105, title: '滨江区' },\n//                         { id: 106, title: '萧山区' },\n\n//                     ]\n//                 },\n//                 {\n//                     id: 11, title: '宁波', children: [\n//                         { id: 110, title: '余姚市' },\n//                         { id: 111, title: '慈溪市' },\n//                         { id: 112, title: '奉化市' },\n//                     ]\n//                 }\n//             ]\n//         },\n//         {\n//             id: 1, title: '江苏', children: [\n//                 { id: 20, title: '南京' },\n//                 { id: 21, title: '南通' },\n//                 { id: 22, title: '无锡' },\n//                 { id: 23, title: '扬州' },\n//                 { id: 24, title: '苏州' },\n//                 { id: 25, title: '连云港' },\n//             ]\n//         },\n//         { id: 2, title: '上海' }\n//     ], null));  // 根节点的父组件为空\n\n\n//     const Tree = ({ data }) => (   // 树形选择组件\n//         <ul className='tree'>\n//             {data.map(item => (\n//                 <li className={`tree-item ${item.open}`} key={item.id}>\n//                     <div className='tree-title'>\n//                         <div className={`folder ${item.open}`} onClick={() => {  // 是否点击下拉菜单打开子选项\n//                             if (item.open !== '') {\n//                                 if (item.open == 'open') {\n//                                     item.open = 'close';\n//                                 } else {\n//                                     item.open = 'open';\n//                                 }\n//                                 setData([...orgData]);  // 重新渲染更新状态后的数据\n//                             }\n//                         }} />\n//                         <div className={`checkbox ${item.onSelect}`} onClick={() => {  // 是否选择当前选项\n//                             if (item.onSelect == '') {\n//                                 item.onSelect = 'checked';\n//                             } else {\n//                                 item.onSelect = '';\n//                             }\n//                             adjustChecked(item);\n//                             countCheck(item);\n//                             setData([...orgData]); // 重新渲染更新状态后的数据\n//                             console.log(orgData)\n//                             // console.log(item) // 当前被选中的项 \n//                             // eg: {id: 20, title: \"南京\", open: \"\", parent: {…}, onSelect: \"checked\"}\n//                         }} />\n//                         <div className='item'>{item.title}</div>\n//                     </div>\n//                     {item.children ? (\n//                         <Tree data={item.children} />\n//                     ) : ''}\n//                 </li>\n//             ))}\n//         </ul>\n//     );\n\n//     return <Tree data={orgData} />\n// }"]},"metadata":{},"sourceType":"module"}